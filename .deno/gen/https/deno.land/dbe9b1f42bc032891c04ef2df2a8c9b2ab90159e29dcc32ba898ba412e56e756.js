export { nodesFromString } from "./deserialize.ts";
export * from "./dom/node.ts";
export * from "./dom/element.ts";
export * from "./dom/document.ts";
export * from "./dom/document-fragment.ts";
export * from "./dom/dom-parser.ts";
export * from "./dom/elements/html-template-element.ts";
export { disableCodeGeneration as denoDomDisableQuerySelectorCodeGeneration } from "./dom/selectors/selectors.ts";
// Re-export private constructors without constructor signature
import { CharacterData as ConstructibleCharacterData, Node as ConstructibleNode } from "./dom/node.ts";
import { HTMLDocument as ConstructibleHTMLDocument } from "./dom/document.ts";
import { Attr as ConstructibleAttr, Element as ConstructibleElement } from "./dom/element.ts";
export const Node = ConstructibleNode;
export const HTMLDocument = ConstructibleHTMLDocument;
export const CharacterData = ConstructibleCharacterData;
export const Element = ConstructibleElement;
export const Attr = ConstructibleAttr;
export { NodeListPublic as NodeList } from "./dom/node-list.ts";
export { HTMLCollectionPublic as HTMLCollection } from "./dom/html-collection.ts";
import { NodeList } from "./dom/node-list.ts";
import { HTMLCollection } from "./dom/html-collection.ts";
// Prevent childNodes and HTMLCollections from being seen as an arrays
const oldHasInstance = Array[Symbol.hasInstance];
Object.defineProperty(Array, Symbol.hasInstance, {
    value (value) {
        switch(value?.constructor){
            case HTMLCollection:
            case NodeList:
                return false;
            default:
                return oldHasInstance.call(this, value);
        }
    },
    configurable: true
});
const oldIsArray = Array.isArray;
Object.defineProperty(Array, "isArray", {
    value: (value)=>{
        switch(value?.constructor){
            case HTMLCollection:
            case NodeList:
                return false;
            default:
                return oldIsArray.call(Array, value);
        }
    },
    configurable: true
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZGVub19kb21AdjAuMS40My9zcmMvYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IG5vZGVzRnJvbVN0cmluZyB9IGZyb20gXCIuL2Rlc2VyaWFsaXplLnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kb20vbm9kZS50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZG9tL2VsZW1lbnQudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RvbS9kb2N1bWVudC50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZG9tL2RvY3VtZW50LWZyYWdtZW50LnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kb20vZG9tLXBhcnNlci50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZG9tL2VsZW1lbnRzL2h0bWwtdGVtcGxhdGUtZWxlbWVudC50c1wiO1xuZXhwb3J0IHsgZGlzYWJsZUNvZGVHZW5lcmF0aW9uIGFzIGRlbm9Eb21EaXNhYmxlUXVlcnlTZWxlY3RvckNvZGVHZW5lcmF0aW9uIH0gZnJvbSBcIi4vZG9tL3NlbGVjdG9ycy9zZWxlY3RvcnMudHNcIjtcblxuLy8gUmUtZXhwb3J0IHByaXZhdGUgY29uc3RydWN0b3JzIHdpdGhvdXQgY29uc3RydWN0b3Igc2lnbmF0dXJlXG5pbXBvcnQge1xuICBDaGFyYWN0ZXJEYXRhIGFzIENvbnN0cnVjdGlibGVDaGFyYWN0ZXJEYXRhLFxuICBOb2RlIGFzIENvbnN0cnVjdGlibGVOb2RlLFxufSBmcm9tIFwiLi9kb20vbm9kZS50c1wiO1xuXG5pbXBvcnQgeyBIVE1MRG9jdW1lbnQgYXMgQ29uc3RydWN0aWJsZUhUTUxEb2N1bWVudCB9IGZyb20gXCIuL2RvbS9kb2N1bWVudC50c1wiO1xuXG5pbXBvcnQge1xuICBBdHRyIGFzIENvbnN0cnVjdGlibGVBdHRyLFxuICBFbGVtZW50IGFzIENvbnN0cnVjdGlibGVFbGVtZW50LFxufSBmcm9tIFwiLi9kb20vZWxlbWVudC50c1wiO1xuXG5leHBvcnQgY29uc3QgTm9kZTpcbiAgJiBQaWNrPFxuICAgIHR5cGVvZiBDb25zdHJ1Y3RpYmxlTm9kZSxcbiAgICBrZXlvZiB0eXBlb2YgQ29uc3RydWN0aWJsZU5vZGVcbiAgPlxuICAmIEZ1bmN0aW9uID0gQ29uc3RydWN0aWJsZU5vZGU7XG5leHBvcnQgdHlwZSBOb2RlID0gQ29uc3RydWN0aWJsZU5vZGU7XG5cbmV4cG9ydCBjb25zdCBIVE1MRG9jdW1lbnQ6XG4gICYgUGljazxcbiAgICB0eXBlb2YgQ29uc3RydWN0aWJsZUhUTUxEb2N1bWVudCxcbiAgICBrZXlvZiB0eXBlb2YgQ29uc3RydWN0aWJsZUhUTUxEb2N1bWVudFxuICA+XG4gICYgRnVuY3Rpb24gPSBDb25zdHJ1Y3RpYmxlSFRNTERvY3VtZW50O1xuZXhwb3J0IHR5cGUgSFRNTERvY3VtZW50ID0gQ29uc3RydWN0aWJsZUhUTUxEb2N1bWVudDtcblxuZXhwb3J0IGNvbnN0IENoYXJhY3RlckRhdGE6XG4gICYgUGljazxcbiAgICB0eXBlb2YgQ29uc3RydWN0aWJsZUNoYXJhY3RlckRhdGEsXG4gICAga2V5b2YgdHlwZW9mIENvbnN0cnVjdGlibGVDaGFyYWN0ZXJEYXRhXG4gID5cbiAgJiBGdW5jdGlvbiA9IENvbnN0cnVjdGlibGVDaGFyYWN0ZXJEYXRhO1xuZXhwb3J0IHR5cGUgQ2hhcmFjdGVyRGF0YSA9IENvbnN0cnVjdGlibGVDaGFyYWN0ZXJEYXRhO1xuXG5leHBvcnQgY29uc3QgRWxlbWVudDpcbiAgJiBQaWNrPFxuICAgIHR5cGVvZiBDb25zdHJ1Y3RpYmxlRWxlbWVudCxcbiAgICBrZXlvZiB0eXBlb2YgQ29uc3RydWN0aWJsZUVsZW1lbnRcbiAgPlxuICAmIEZ1bmN0aW9uID0gQ29uc3RydWN0aWJsZUVsZW1lbnQ7XG5leHBvcnQgdHlwZSBFbGVtZW50ID0gQ29uc3RydWN0aWJsZUVsZW1lbnQ7XG5cbmV4cG9ydCBjb25zdCBBdHRyOlxuICAmIFBpY2s8XG4gICAgdHlwZW9mIENvbnN0cnVjdGlibGVBdHRyLFxuICAgIGtleW9mIHR5cGVvZiBDb25zdHJ1Y3RpYmxlQXR0clxuICA+XG4gICYgRnVuY3Rpb24gPSBDb25zdHJ1Y3RpYmxlQXR0cjtcbmV4cG9ydCB0eXBlIEF0dHIgPSBDb25zdHJ1Y3RpYmxlQXR0cjtcblxuZXhwb3J0IHsgTm9kZUxpc3RQdWJsaWMgYXMgTm9kZUxpc3QgfSBmcm9tIFwiLi9kb20vbm9kZS1saXN0LnRzXCI7XG5leHBvcnQgeyBIVE1MQ29sbGVjdGlvblB1YmxpYyBhcyBIVE1MQ29sbGVjdGlvbiB9IGZyb20gXCIuL2RvbS9odG1sLWNvbGxlY3Rpb24udHNcIjtcblxuaW1wb3J0IHsgTm9kZUxpc3QgfSBmcm9tIFwiLi9kb20vbm9kZS1saXN0LnRzXCI7XG5pbXBvcnQgeyBIVE1MQ29sbGVjdGlvbiB9IGZyb20gXCIuL2RvbS9odG1sLWNvbGxlY3Rpb24udHNcIjtcblxuLy8gUHJldmVudCBjaGlsZE5vZGVzIGFuZCBIVE1MQ29sbGVjdGlvbnMgZnJvbSBiZWluZyBzZWVuIGFzIGFuIGFycmF5c1xuY29uc3Qgb2xkSGFzSW5zdGFuY2UgPSBBcnJheVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgdmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHN3aXRjaCAodmFsdWU/LmNvbnN0cnVjdG9yKSB7XG4gICAgICBjYXNlIEhUTUxDb2xsZWN0aW9uOlxuICAgICAgY2FzZSBOb2RlTGlzdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG9sZEhhc0luc3RhbmNlLmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxufSk7XG5cbmNvbnN0IG9sZElzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LCBcImlzQXJyYXlcIiwge1xuICB2YWx1ZTogKHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHtcbiAgICBzd2l0Y2ggKHZhbHVlPy5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBIVE1MQ29sbGVjdGlvbjpcbiAgICAgIGNhc2UgTm9kZUxpc3Q6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBvbGRJc0FycmF5LmNhbGwoQXJyYXksIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbn0pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsZUFBZSxRQUFRLG1CQUFtQjtBQUNuRCxjQUFjLGdCQUFnQjtBQUM5QixjQUFjLG1CQUFtQjtBQUNqQyxjQUFjLG9CQUFvQjtBQUNsQyxjQUFjLDZCQUE2QjtBQUMzQyxjQUFjLHNCQUFzQjtBQUNwQyxjQUFjLDBDQUEwQztBQUN4RCxTQUFTLHlCQUF5Qix5Q0FBeUMsUUFBUSwrQkFBK0I7QUFFbEgsK0RBQStEO0FBQy9ELFNBQ0UsaUJBQWlCLDBCQUEwQixFQUMzQyxRQUFRLGlCQUFpQixRQUNwQixnQkFBZ0I7QUFFdkIsU0FBUyxnQkFBZ0IseUJBQXlCLFFBQVEsb0JBQW9CO0FBRTlFLFNBQ0UsUUFBUSxpQkFBaUIsRUFDekIsV0FBVyxvQkFBb0IsUUFDMUIsbUJBQW1CO0FBRTFCLE9BQU8sTUFBTSxPQUtFLGtCQUFrQjtBQUdqQyxPQUFPLE1BQU0sZUFLRSwwQkFBMEI7QUFHekMsT0FBTyxNQUFNLGdCQUtFLDJCQUEyQjtBQUcxQyxPQUFPLE1BQU0sVUFLRSxxQkFBcUI7QUFHcEMsT0FBTyxNQUFNLE9BS0Usa0JBQWtCO0FBR2pDLFNBQVMsa0JBQWtCLFFBQVEsUUFBUSxxQkFBcUI7QUFDaEUsU0FBUyx3QkFBd0IsY0FBYyxRQUFRLDJCQUEyQjtBQUVsRixTQUFTLFFBQVEsUUFBUSxxQkFBcUI7QUFDOUMsU0FBUyxjQUFjLFFBQVEsMkJBQTJCO0FBRTFELHNFQUFzRTtBQUN0RSxNQUFNLGlCQUFpQixLQUFLLENBQUMsT0FBTyxXQUFXLENBQUM7QUFDaEQsT0FBTyxjQUFjLENBQUMsT0FBTyxPQUFPLFdBQVcsRUFBRTtJQUMvQyxPQUFNLEtBQVUsRUFBVztRQUN6QixPQUFRLE9BQU87WUFDYixLQUFLO1lBQ0wsS0FBSztnQkFDSCxPQUFPLEtBQUs7WUFDZDtnQkFDRSxPQUFPLGVBQWUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNyQztJQUNGO0lBQ0EsY0FBYyxJQUFJO0FBQ3BCO0FBRUEsTUFBTSxhQUFhLE1BQU0sT0FBTztBQUNoQyxPQUFPLGNBQWMsQ0FBQyxPQUFPLFdBQVc7SUFDdEMsT0FBTyxDQUFDLFFBQXdCO1FBQzlCLE9BQVEsT0FBTztZQUNiLEtBQUs7WUFDTCxLQUFLO2dCQUNILE9BQU8sS0FBSztZQUNkO2dCQUNFLE9BQU8sV0FBVyxJQUFJLENBQUMsT0FBTztRQUNsQztJQUNGO0lBQ0EsY0FBYyxJQUFJO0FBQ3BCIn0=